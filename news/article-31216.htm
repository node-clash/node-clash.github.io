<!DOCTYPE html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://node-clash.github.io/news/article-31216.htm" />
    <!-- Required Meta Tags -->
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Unity实现简单的对象池_在线工具</title>
        <meta name="description" content="先说说为什么要使用对象池 在Unity游戏运行时，经常需要生成一些物体，例如子弹、敌人等。虽然Unity中有Instantiate()方法可以使用，但是在某些情况下并不高效。特别是对于那些需要大量生成" />
        <link rel="icon" href="/assets/website/img/node_clash/favicon.ico" type="image/x-icon"/>
    <!-- CSS Files -->
    <link rel="stylesheet" href="/assets/website/css/node_clash/animate.css">
    <link rel="stylesheet" href="/assets/website/css/node_clash/bootstrap.min.css">
    <link rel="stylesheet" href="/assets/website/css/node_clash/font-awesome.min.css">
    <link rel="stylesheet" href="/assets/website/css/node_clash/slick.css">
    <link rel="stylesheet" href="/assets/website/css/node_clash/magnific-popup.css">
    <link rel="stylesheet" href="/assets/website/css/node_clash/jquery.lineProgressbar.css">
    <link rel="stylesheet" href="/assets/website/css/node_clash/style.css">
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-FTZXQP7KV5"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-FTZXQP7KV5');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-page="detail">
        <!-- Preloader Starts -->
    <div class="preloader" id="preloader">
        <div class="preloader-inner">
            <div class="spinner">
                <div class="bounce1"></div>
                <div class="bounce2"></div>
                <div class="bounce3"></div>
            </div>
        </div>
    </div>
    <!-- Header Section Starts -->
    <header class="cropium-header-section fixed-navigation">
        <div class="container">
            <div class="row">
                <div class="col-lg-12">
                    <!-- Navbar Starts -->
                    <nav class="navbar navbar-area navbar-expand-lg nav-style-02 nav-absolute">
                        <div class="container nav-container">
                            <div class="responsive-mobile-menu">
                                <div class="logo-wrapper">
                                                                        <a href="/" class="logo">
                                        <span>Clash Node</span>
                                    </a>
                                                                    </div>
                                <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#cropium-main-menu" aria-expanded="false" aria-label="Toggle navigation">
                                    <span class="toggle-icon"></span>
                                    <span class="toggle-icon"></span>
                                    <span class="toggle-icon"></span>
                                </button>
                            </div>
                            <div class="collapse navbar-collapse" id="cropium-main-menu">
                                <ul class="navbar-nav">
                                                                        <li>
                                        <a href="/">首页</a>
                                    </li>
                                                                        <li>
                                        <a href="/free-nodes/">免费节点</a>
                                    </li>
                                                                        <li>
                                        <a href="/paid-subscribe/">推荐机场</a>
                                    </li>
                                                                        <li>
                                        <a href="/news/">新闻资讯</a>
                                    </li>
                                                                        <li>
                                        <a href="#">关于</a>
                                    </li>
                                    <li>
                                        <a href="#">联系</a>
                                    </li>
                                </ul>
                            </div>
                        </div>
                    </nav>
                    <!-- Navbar End -->
                </div>
            </div>
        </div>
    </header>
    <!-- Breadcrumb Area Starts -->
    <section class="breadcrumb-section">
        <div class="container">
            <div class="row">
                <div class="col-lg-12">
                    <h1 class="title">Unity实现简单的对象池_在线工具</h1>
                    <a href="/">首页</a> / <a href="/news/">新闻资讯</a> <span> / 正文</span>
                </div>
            </div>
        </div>
    </section>
    <!-- About Section Starts -->
    <section class="cropium-about-section padding-top-90 padding-bottom-120">
        <div class="container">
            <div class="row">
                <div class="col-md-9">
                                    <input type="hidden" id="share-website-info" data-name="" data-url="">
                  				  				  				</h1> <p>先说说为什么要使用对象池<br /> 在Unity游戏运行时，经常需要生成一些物体，例如子弹、敌人等。虽然Unity中有<code>Instantiate()</code>方法可以使用，但是在某些情况下并不高效。特别是对于那些需要大量生成又需要大量销毁的物体来说，多次重复调用<code>Instantiate()</code>方法和<code>Destory()</code>方法会造成大量的性能消耗。<br /> 这时使用对象池是一个更好的选择。<br /> 那么什么是对象池呢？<br /> 简单来说，就是在一开始创建一些物体(或对象)，将它们隐藏(休眠)起来，对象池就是这些物体的集合，当需要使用的时候，就将需要的对象激活然后使用，而不是实例化生成。如果对象池中的对象消耗完了可以扩大对象池或者重新再次使用对象池中的对象。<br /> 一般情况下，一个对象池中存放的都是一类物体，我们一般希望创建多个对象池来存储不同类型的物体。<br /> 例如我们需要两个对象池来分别存储球体和立方体。<br /> 那么可以选择使用<code>Dictionary</code>来创建对象池，这样不仅可以创建对象池，还能指定每个对象池存储对象的类型。这样就能通过Tag来访问对象池。<br /> 至于对象池中可以使用<code>Queue</code>(队列)来存储具体的对象，队列不仅可以快速获取到第一个对象，能够按顺序获取对象。如果出队的对象在使用完成之后再次入队，那么这样就可以一直循环来重用对象。</p> </h1> <p>新建一个Unity项目，在场景中添加一个空物体，命名为ObjectPool<br /> 同时制作一个黑色的地面便于显示和观察<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220505/039dcdc0ecf4166c3f26e5ae09249647.jpg" alt="Unity实现简单的对象池_在线工具"><br /> 新建脚本<code>ObjectPooler</code>添加到ObjectPool上</p> <pre><code>public class ObjectPooler : MonoBehaviour {     [System.Serializable]        public class Pool    //对象池类     {         public string tag;          //对象池的Tag(名称)         public GameObject prefab;   //对象池所保存的物体类型         public int size;            //对象池的大小     }     public List&lt;Pool&gt; pools;                  Dictionary&lt;string, Queue&lt;GameObject&gt;&gt; poolDictionary;  //声明字典      void Start()     {         //实例化字典                  对象池的Tag   对象池保存的物体         poolDictionary = new Dictionary&lt;string, Queue&lt;GameObject&gt;&gt;();     } } </code></pre> <p>在Inspector中添加对应的数据，这里简单创建了立方体和球体并设为了预制体<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220505/647e9500dbeb73596520642a982fcad4.jpg" alt="Unity实现简单的对象池_在线工具"></p> <p>然后继续修改<code>ObjectPooler</code></p> <pre><code>public class ObjectPooler : MonoBehaviour {     [System.Serializable]        public class Pool     {         public string tag;         public GameObject prefab;         public int size;     }     public List&lt;Pool&gt; pools;     Dictionary&lt;string, Queue&lt;GameObject&gt;&gt; poolDictionary;      public static ObjectPooler Instance;    //单例模式，便于访问对象池     private void Awake()     {         Instance = this;     }     void Start()     {         poolDictionary = new Dictionary&lt;string, Queue&lt;GameObject&gt;&gt;();         foreach (Pool pool in pools)         {             Queue&lt;GameObject&gt; objectPool = new Queue&lt;GameObject&gt;();     //为每个对象池创建队列             for (int i = 0; i &lt; pool.size; i++)             {                 GameObject obj = Instantiate(pool.prefab);                 obj.SetActive(false);   //隐藏对象池中的对象                 objectPool.Enqueue(obj);//将对象入队             }             poolDictionary.Add(pool.tag, objectPool);   //添加到字典后可以通过tag来快速访问对象池         }     }      public GameObject SpawnFromPool(string tag, Vector3 positon, Quaternion rotation)     //从对象池中获取对象的方法     {         if (!poolDictionary.ContainsKey(tag))  //如果对象池字典中不包含所需的对象池         {             Debug.Log("Pool: " + tag + " does not exist");             return null;         }          GameObject objectToSpawn = poolDictionary[tag].Dequeue();  //出队，从对象池中获取所需的对象         objectToSpawn.transform.position = positon;  //设置获取到的对象的位置         objectToSpawn.transform.rotation = rotation; //设置对象的旋转         objectToSpawn.SetActive(true);                //将对象从隐藏设为激活          poolDictionary[tag].Enqueue(objectToSpawn);     //再次入队，可以重复使用，如果需要的对象数量超过对象池内对象的数量，在考虑扩大对象池         //这样重复使用就不必一直生成和消耗对象，节约了大量性能         return objectToSpawn;  //返回对象     } } </code></pre> <p>新建脚本<code>CubeSpanwer</code>，来使用对象池生成物体</p> <pre><code>public class CubeSpanwer : MonoBehaviour {     ObjectPooler objectPooler;     private void Start()     {         objectPooler = ObjectPooler.Instance;     }     private void FixedUpdate()     {         //这样会高效一点，比ObjectPooler.Instance         objectPooler.SpawnFromPool("Cube", transform.position, Quaternion.identity);     } } </code></pre> <p>新建脚本<code>Cube</code>，添加到Cube预制体上，让其在生成时添加一个力便于观察<br /> 注意：为了方便观察这里移除了Cube上的BoxCollider</p> <pre><code>public class Cube : MonoBehaviour {     void Start()     {         GetComponent&lt;Rigidbody&gt;().AddForce(new Vector3(Random.Range(0f, 0.2f), 1f, Random.Range(0f, 0.2f)));     } } </code></pre> <p>我们发现Cube并没有向上飞起而是堆叠在一起<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220505/b36d873eff6e0be5af2da27a93bef7f0.jpg" alt="Unity实现简单的对象池_在线工具"><br /> 这时因为Cube只在生成时在Start中添加了力，只调用了一次，但马上就被隐藏放入对象池了，等到再次取出时，并没有任何方法的调用，只是单纯设置位置</p> <p>我们需要让cube对象知道自己被重用了，再次调用添加力的方法<br /> 新建接口 <code>IPooledObject</code></p> <pre><code>public interface IPooledObject {     void OnObjectSpawn(); } </code></pre> <p>然后让<code>Cube</code>继承该接口</p> <pre><code>public class Cube : MonoBehaviour, IPooledObject {     private Rigidbody rig;     public void OnObjectSpawn()     {         rig = gameObject.GetComponent&lt;Rigidbody&gt;();         rig.velocity = Vector3.zero;	//将速度重置为0，物体在被隐藏时仍然具有速度，不然重用时仍然具有向下的速度         rig.AddForce(new Vector3(Random.Range(0, 0.2f), 10, Random.Range(0, 0.2f)), ForceMode.Impulse);     } } </code></pre> <p>然后修改<code>ObjectPooler</code>，让Cube在被重用时调用重用的方法</p> <pre><code>public GameObject SpawnFromPool(string tag, Vector3 positon, Quaternion rotation)     //从对象池中获取对象的方法     {         ......         IPooledObject pooledObj = objectToSpawn.GetComponent&lt;IPooledObject&gt;();         if (pooledObj != null)  //判断，并不是所有对象都继承了该接口，例如Cube我想让它向上飞，Sphere则让它直接生成，Sphere就不必继承IPoolObject接口         {             pooledObj.OnObjectSpawn();  //调用重用时的方法         }         poolDictionary[tag].Enqueue(objectToSpawn);         return objectToSpawn;     } </code></pre> <p>运行结果：</p> <p>Cube从CubeSpawner不断生成，可以自行设置计时器来限制生成的速度<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220505/2ca24adb444ff93c15bb3bcdb575ebd4.jpg" alt="Unity实现简单的对象池_在线工具"></p> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-30810.htm">广州宠物收容中心电话地址（广州什么地方可以收容宠物）</a></p>
                                        <p>下一个：<a href="/news/article-31217.htm">动物医院大众点评怎么做（动物医院大众点评评语）</a></p>
                                    </div>
                                </div>
                <div class="col-md-3">
                    <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/free-nodes/2024-11-22-node-share.htm" title="11月22日→21M/S|2024年最新免费节点Clash Node订阅链接地址">11月22日→21M/S|2024年最新免费节点Clash Node订阅链接地址</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-9-22-node-share-links.htm" title="9月22日→20.1M/S|2024年最新免费节点Clash Node订阅链接地址">9月22日→20.1M/S|2024年最新免费节点Clash Node订阅链接地址</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-9-11-free-subscribe-node.htm" title="9月11日→19.8M/S|2024年最新免费节点Clash Node订阅链接地址">9月11日→19.8M/S|2024年最新免费节点Clash Node订阅链接地址</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-10-31-node-share-links.htm" title="10月31日→18M/S|2024年最新免费节点Clash Node订阅链接地址">10月31日→18M/S|2024年最新免费节点Clash Node订阅链接地址</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-11-6-node-share-links.htm" title="11月6日→20.6M/S|2024年最新免费节点Clash Node订阅链接地址">11月6日→20.6M/S|2024年最新免费节点Clash Node订阅链接地址</a></li>
                        <li class="py-2"><a href="/news/article-21035.htm" title="苏州宠物领养中心领养要钱吗（苏州宠物狗领养）">苏州宠物领养中心领养要钱吗（苏州宠物狗领养）</a></li>
                        <li class="py-2"><a href="/news/article-22866.htm" title="动物医院价格标 动物医院价格标准是多少">动物医院价格标 动物医院价格标准是多少</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-12-11-free-subscribe-node.htm" title="12月11日→21.5M/S|2024年最新免费节点Clash Node订阅链接地址">12月11日→21.5M/S|2024年最新免费节点Clash Node订阅链接地址</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-10-22-free-subscribe-node.htm" title="10月22日→20.6M/S|2024年最新免费节点Clash Node订阅链接地址">10月22日→20.6M/S|2024年最新免费节点Clash Node订阅链接地址</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-9-10-node-share-links.htm" title="9月10日→19.2M/S|2024年最新免费节点Clash Node订阅链接地址">9月10日→19.2M/S|2024年最新免费节点Clash Node订阅链接地址</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">78</span> <a href="/date/2024-12/" title="2024-12 归档">2024-12</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">34</span> <a href="/date/2024-11/" title="2024-11 归档">2024-11</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">31</span> <a href="/date/2024-10/" title="2024-10 归档">2024-10</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">22</span> <a href="/date/2024-09/" title="2024-09 归档">2024-09</a></h4>
            </li>
                    </ul>
    </div>
</div>

                </div>
            </div>
        </div>
    </section>
        <!-- Footer Section Starts -->
    <footer class="footer-section common-footer">
        <div class="footer-bottom">
            <div class="container">
                <div class="row">
                    <div class="col-md-6">
                        <div class="footer-logo">
                            <p>
                                <a href="/">首页</a> | 
                                <a href="/free-node/">免费节点</a> | 
                                <a href="/news/">新闻资讯</a> |
                                <a href="/about-us.htm">关于我们</a> |
                                <a href="/disclaimer.htm">免责申明</a> |
                                <a href="/privacy.htm">隐私申明</a> |
                                <a href="/sitemap.xml">网站地图</a>
                            </p>
                            <a href="/">Clash Node机场节点分享官网</a> 版权所有 Powered by WordPress
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </footer>
    <!-- Javascript Files -->
    <script src="/assets/website/js/frontend/node_clash/vendor/jquery-2.2.4.min.js"></script>
    <script src="/assets/website/js/frontend/node_clash/vendor/bootstrap.min.js"></script>
    <script src="/assets/website/js/frontend/node_clash/vendor/slick.min.js"></script>
    <script src="/assets/website/js/frontend/node_clash/vendor/counterup.min.js"></script>
    <script src="/assets/website/js/frontend/node_clash/vendor/waypoints.min.js"></script>
    <script src="/assets/website/js/frontend/node_clash/vendor/jquery.magnific-popup.js"></script>
    <script src="/assets/website/js/frontend/node_clash/vendor/jquery.lineProgressbar.js"></script>
    <script src="/assets/website/js/frontend/node_clash/vendor/lineProgressbarActivate.js"></script>
    <script src="/assets/website/js/frontend/node_clash/vendor/easing.min.js"></script>
    <script src="/assets/website/js/frontend/node_clash/vendor/wow.min.js"></script>
    <script src="/assets/website/js/frontend/node_clash/main.js"></script>
    <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script><script src="/assets/website/js/frontend/G.js"></script>
</body>

</html>